# Loads default set of integrations. Do not remove.
default_config:

# Load frontend themes from the themes folder
frontend:
  themes: !include_dir_merge_named themes

homeassistant:
  allowlist_external_dirs:
    - "/config"

api:

influxdb:
  host: a0d7b954-influxdb
  port: 8086
  database: homeassistant
  username: homeassistant
  password: homeassistant
  max_retries: 3
  default_measurement: state
  tags_attributes:
    - friendly_name

group:
  garmin:
    name: Garmin
    entities:
      - light.orein_smart_bulb_001
      - light.orein_smart_bulb_002
      - light.orein_smart_bulb_003
      - light.orein_smart_bulb_004

fan:
  - platform: template
    fans:
      air_purifier_virtual:
        unique_id: "air_purifier_virtual"
        friendly_name: "Air Purifier Virtual"
        value_template: "{{ states('fan.zhimi_airpurifier_mb3') }}"
        percentage_template: >
          {{ ((states('number.zhimi_airpurifier_mb3_favorite_level') | int + 1) * 100/15) | round(0) }}
        turn_on:
          service: script.turn_air_purifier_on
          data_template:
            percentage: "{{ ((states('number.zhimi_airpurifier_mb3_favorite_level') | int + 1) * 100/15) | round(0) }}"
            entity_id: fan.zhimi_airpurifier_mb3
            virtual_entity_id: fan.air_purifier_virtual
        turn_off:
          service: fan.turn_off
          data:
            entity_id: fan.zhimi_airpurifier_mb3
        set_percentage:
          service: script.set_air_purifier_speed
          data_template:
            percentage: "{{ percentage }}"
            entity_id: fan.zhimi_airpurifier_mb3
            favorite_level_entity_id: number.zhimi_airpurifier_mb3_favorite_level
        speed_count: 15
      air_purifier_virtual_2:
        unique_id: "air_purifier_virtual_2"
        friendly_name: "Air Purifier Virtual 2"
        value_template: "{{ states('fan.zhimi_airpurifier_mb3_2') }}"
        percentage_template: >
          {{ ((states('number.zhimi_airpurifier_mb3_favorite_level_2') | int + 1) * 100/15) | round(0) }}
        turn_on:
          service: script.turn_air_purifier_on
          data_template:
            percentage: "{{ ((states('number.zhimi_airpurifier_mb3_favorite_level_2') | int + 1) * 100/15) | round(0) }}"
            entity_id: fan.zhimi_airpurifier_mb3_2
            virtual_entity_id: fan.air_purifier_virtual_2
        turn_off:
          service: fan.turn_off
          data:
            entity_id: fan.zhimi_airpurifier_mb3_2
        set_percentage:
          service: script.set_air_purifier_speed
          data_template:
            percentage: "{{ percentage }}"
            entity_id: fan.zhimi_airpurifier_mb3_2
            favorite_level_entity_id: number.zhimi_airpurifier_mb3_favorite_level_2
        speed_count: 15

climate:
  - platform: climate_template
    name: Google Assistant AC
    modes:
      - "auto"
      - "dry"
      - "off"
      - "cool"
      - "fan_only"
    min_temp: 16
    max_temp: 30

    # get current temp.
    current_temperature_template: "{{ states('sensor.zhimi_airpurifier_mb3_temperature') }}"

    # get current humidity.
    current_humidity_template: "{{ states('sensor.zhimi_airpurifier_mb3_humidity') }}"

    # swing mode switch for UI.
    swing_mode_template: "{{ states('input_boolean.living_room_swing_mode') }}"

    # availability based on sensor status.
    availability_template: "{{ true }}"

    # action for setting hvac mode
    set_hvac_mode:
      # send the climate's current state to Google Assistant.
      - service: google_assistant_sdk.send_text_command
        data_template:
          command: >
            {% if hvac_mode == 'cool' %}
              Set the air conditioner to cool mode
            {% elif hvac_mode == 'heat' %}
              Set the air conditioner to heat mode
            {% elif hvac_mode == 'auto' %}
              Set the air conditioner to auto mode
            {% elif hvac_mode == 'dry' %}
              Set the air conditioner to dry mode
            {% elif hvac_mode == 'fan_only' %}
              Set the air conditioner to fan only mode
            {% else %}
              Turn off the air conditioner
            {% endif %}
      - service: climate.set_temperature
        target:
          entity_id: climate.google_assistant_ac
        data_template:
          temperature: "{{ state_attr('climate.google_assistant_ac', 'temperature') }}"

    # action for setting temperature
    set_temperature:
      - service: google_assistant_sdk.send_text_command
        data_template:
          command: "Set the air conditioner to {{ temperature }}C"

input_boolean:
  living_room_swing_mode:
    name: Swing Mode

automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
